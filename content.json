{"pages":[],"posts":[{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2022/01/18/hello-world/"},{"title":"音游记录","text":"记录一下音游水平的进步,记录时间不全是达成时间 arcaea10.00 2021年7月19日记录(达成)11.00 2021年12月31日记录(达成)11.09 2021年1月30日记录(卡瓶颈了啊啊啊啊啊(冬之花1:14启奏),什么底力下人)11.11 2021年2月23日记录 短期目标：11.50 在三月arc五周年全曲包后嫖到11.4x，然后又卡瓶颈，4.0时发现因为流速调到6.0后忘调回去了，白打几个月，权当放置算了，嫖了一点分，解testify友人打了3个天花板，现在卡在11.56，摆烂了11.56 2022年7月29日记录 短期目标：11.65 是真的摆了，对arc没啥热情了，有个活动才上号摸两把，还是maimai好玩11.60 2022年11月29日记录 phigros随缘推rks 13.85 2021年12月31日记录 phi偶尔打打14.45 2022年7月29日记录 其实移动端很少打了14.65 maimai旧框 8.2大一下一学期没碰（ 不如先彩了dx 不会去打了吧，dx多香 DX感觉下学期没时间打啊呜呜（5776(未更新版本) 2022年7月29日记录 7006 1k段 6006底 7495 1k段 6495底 2023年3月17日记录 fes了14429 2023年7月30日记录 malody4k偶尔打打常规3dan 2022年7月30日记录(达成) chunithmchunithm到店后，能出校立马去玩了，爽！ 可惜比较贵，而且音游群群友，同学，出勤的朋友都玩的不多12.54 2022年11月29日记录 12.58 期间就打了几pc吧 2023年3月17日记录 sdvx先写在这儿，等我买个台或同学，出勤的朋友买个台，很急大概能打12左右,嫖同学台打了那么几把，能过个天极，感觉没那么好玩（ 2023年3月17日记录","link":"/2022/01/19/%E9%9F%B3%E6%B8%B8%E8%AE%B0%E5%BD%95/"},{"title":"漫画截图","text":"blog也不知道写什么,贴几个漫画的截图水一水好了( 樱开二度留级生的校园喜剧日常留级亦是风景！😤想从容开心的生活捏想吃软饭,本来就是废物捏( 谁说上学就要上课😤 早八杀我(哭)","link":"/2022/02/06/%E6%BC%AB%E7%94%BB%E6%88%AA%E5%9B%BE/"},{"title":"galgame","text":"推过的galgame从大一下推过的开始记录seabednarcissus1narcissus2narcissus3 小小的伊丽丝星空列车与白的旅行弹丸论破1弹丸论破2心跳文学部沙耶之歌120日元系列9nine-九次九日九重色9nine-天色天歌天籁音9nine-春色春恋春熙风9nine-雪色雪花雪余痕9nine新章 大二上学期推的ever17素晴日 有点无聊（ 推不下去了（ 千恋万花想推，后来听同学说也无聊，近月推了两条线，但我的心已属于露娜，真没动力推别的线，kirkira还差最后一条，也是推不动（，想玩点9nine天一样很乐的（期间去打了ghost trick（，nds游戏，很不错2022年11月29日记录 近月少女的礼仪（推完露娜线包括af，凑线，就这样吧）kirakira2023年1月31日记录 大二下暑假推的remember11 相当nb，一天打完悟线两个结局又爽又累2023年7月30日记录 兰斯12023年12月8日补记录 大三上推的兰斯22023年12月8日记录","link":"/2022/07/29/galgame/"},{"title":"学习记录","text":"python字符串常用 str[number:number] str.find(“string”)os.path.basename(file_path) 得到文件名file_path为C:\\Max.asm,则得到Max.asm with open(file_path, ‘r’) as file: 读取文件可以 for line in file 一行一行读，带有换行符可以使用_line=line.strip() 移除字符串头尾指定的字符（默认为空格或换行符）或字符序列with open(file_path, ‘w’) as file: 写入文件","link":"/2023/01/09/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"},{"title":"自学课程记录","text":"csappsicp计网-中科大网课os-南大网课python神经网络编程python生成对抗网络","link":"/2023/03/17/%E8%87%AA%E5%AD%A6%E8%AF%BE%E7%A8%8B%E8%AE%B0%E5%BD%95/"},{"title":"ghs网站记录","text":"ghs 图片 ，文本， 视频，音频，动画真人 二次元软 硬 音声asmr online asmr.onejapanes easmr japaneseasmr.comjasmr jasmr.netasmr基佬中心 one.asmr.gay pornhub cn.pornhub.comxvideosfc2","link":"/2022/08/17/ghs%E7%BD%91%E7%AB%99%E8%AE%B0%E5%BD%95/"},{"title":"信息获取技术重点概要","text":"第一章：1. 掌握系统误差、随机误差、粗大误差的定义系统误差 在同一测量条件下，多次测量被测量时，绝对值和符号保持不变，或在条件改变时，按一定规律（如线性，多项式，周期性等函数规律）变化的误差 随机误差 在同一测量条件下，多次测量被测量时，其绝对值和符号以不可预定的方式变化着的误差 粗大误差 超出在规定条件下预期的误差称为粗大误差，粗大误差又称疏忽误差 2. 误差处理第二章：1. 五大静态特性的定义传感器的静态特性是指被测量的值处于稳定状态时的输出与输入的关系。 灵敏度 输出量增量Δy与引起输出量增量相应输入量Δx之比 线性度 在全量程范围内实际特性曲线与拟合直线之间的最大偏差值△Lmx与满量程输出值Yfs之比。线性度也称为非线性误差，用Yl表示 迟滞 传感器在全量程范围内最大的迟滞差值△Hmx与满量程输出值Ys之比称为迟滞误差，用YH表示 重复性 传感器在相同工作条件下，输人量按同一方向作全量程连续多次变化时，所得特性曲线不一致的程度。重复性误差属于随机误差，常用标准差σ计算，也可用正反行程中最大重复差值△Rmax计算 漂移 输人量不变的情况下，传感器输出量会随着时间变化，此现象称为漂移。温度漂移通常用传感器工作环境温度偏离标准环境温度(一般为20℃)时，温度变化1℃输出值的变化量与满量程Ys的百分比表示 2.动态特性方程传感器的动态特性是指输入量随时间变化时传感器的响应特性。 瞬态响应特性 频率响应特性 零阶系统$$y\\left( t\\right) =kx\\left( t\\right)$$一阶系统$$ \\tau \\dfrac{dy\\left( t\\right) }{dt}+y\\left( t\\right) =kx\\left( t\\right) $$二阶系统$$\\dfrac{d^{2}y\\left( t\\right) }{d^{2}t}+2\\varepsilon w_{n}\\dfrac{dy\\left( t\\right) }{dt}+w_{n}^{2}y\\left( t\\right) =w_{n}^{2} {k} x\\left( t\\right) $$ 第三章：1. 应变式传感器的工作原理金属电阻应变片的工作原理基于电阻应变效应。导体在外界作用下产生机械变形（拉伸或压缩）时，其电阻值相应发生变化，这种现象称为电阻应变效应。 2.单臂电桥和差动电桥的图、公式单臂电桥$$\\begin{aligned}U_{0}=\\dfrac{E}{4}\\times \\dfrac{\\Delta R_{1}}{R}\\ K_{u}=\\dfrac{E}{4}\\end{aligned}$$半桥差动电桥$$\\begin{aligned}U_{0}=\\dfrac{E}{2}\\times \\dfrac{\\Delta R_{1}}{R}\\ K_{u}=\\dfrac{E}{2}\\end{aligned}$$全桥差动电桥$$\\begin{aligned}U_{0}=\\dfrac{E}{1}\\times \\dfrac{\\Delta R_{1}}{R}\\ K_{u}=\\dfrac{E}{1}\\end{aligned}$$ 3. 温度补偿方法电阻应变片的温度补偿方法通常有线路补偿和应变片自补偿两大类。 第四章：1. 差动变压器式传感器的工作原理当活动衔铁向上移动时，使互感量M1,&gt;M2,因而E21,增加，而E22减小。反之，E22增加，E21减小。因为U2=E21-E22，所以当E21、E22随着衔铁位移x变化时，U2也必将随x变化。 2. 电涡流传感器的分类和特点根据电涡流在导体内的渗透情况，电涡流传感器可分为高频反射式和低频透射式两类，但从基本工作原理上来说，二者是相似的。 电涡流式传感器最大的特点是能对位移、厚度、表面温度、速度、应力、材料损伤等进行非接触式连续测量，另外还具有体积小、灵敏度高、频率响应宽等特点，应用极其广泛。 第五章：1. 电容器的公式$$C=\\dfrac{\\varepsilon A}{d}=\\dfrac{\\varepsilon _{0}\\varepsilon _{r}A}{d}$$ 2. 灵敏度的公式变极距式$$K=\\dfrac{\\Delta C/C_{0}}{\\Delta d}=\\dfrac{1}{d_{0}}$$变面积式$$K=\\dfrac{\\Delta C/C_{0}}{\\Delta A}$$ 第六章：1. 压电效应某些电介质，当沿着一定方向对其施力而使它变形时，内部就产生极化现象，同时在它的两个表面上产生符号相反的电荷，当外力去掉后，又重新恢复到不带电状态。这种现象称为压电效应。当作用力方向改变时，电荷的极性也随之改变。有时人们把这种机械能转换为电能的现象，称为“正压电效应”。相反，当在电介质极化方向施加电场时，这些电介质也会产生几何变形，这种现象称为“逆压电效应”（电致伸缩效应）。具有压电效应的材料称为压电材料，压电材料能实现机一电能量的相互转换. 2. 压电元件的两种连接方式由于压电材料的电荷是有极性的，因此接法也有两种。如图6-5所示，从作用力看，元件是串接的，因而每片受到的作用力相同，产生的变形和电荷数量大小都与单片时相同。图6-5(α)是两个压电片的负端粘结在一起，中间插入的金属电极成为压电片的负极，正电极在两边的电极上。从电路上看，这是并联接法，类似两个电容的并联。所以，外力作用下正负电极上的电荷量增加了1倍，电容量也增加了1倍，输出电压与单片时相同。图6-5(b)是两压电片不同极性端粘结在一起，从电路上看是串联的，两压电片中间粘接处正负电荷中和，上、下极板的电荷量与单片时相同，总电容量为单片的一半，输出电压增大了1倍。 在上述两种接法中，并联接法输出电荷大，本身电容大，时间常数大，适宜用在测量慢变信号并且以电荷作为输出量的场合。而串联接法输出电压大，本身电容小，适宜用于以电压作输出信号，并且测量电路输入阻抗很高的场合。 3. 电荷与电压放大器的区别压电传感器有很好的高频响应，但是，当作用于压电元件的力为静态力(ω=0)时，前置放大器的输出电压等于零，因为电荷会通过放大器输入电阻和传感器本身漏电阻漏掉，所以压电传感器不能用于静态力的测量。 当电缆长度改变时，Cc也将改变，因而Uim也随之变化。因此，压电传感器与前置放大器之间的连接电缆不能随意更换，否则将引入测量误差。 电荷放大器的输出电压uo只取决于输入电荷与反馈电容Cf,与电缆电容Cc无关，且与q成正比，这是电荷放大器的最大特点。为了得到必要的测量精度，要求反馈电容Cf的温度和时间稳定性都很好，在实际电路中，考虑到不同的量程等因素，Cf的容量做成可选择的，范围一般为100~10的4次方pF。 第七章：1. 霍尔效应置于磁场中的静止载流导体，当它的电流方向与磁场方向不一致时，载流导体上垂直于电流和磁场的方向上将产生电动势，这种现象称霍尔效应。该电动势称为霍尔电动势。 2. 霍尔元件的结构霍尔元件的结构很简单，它是由霍尔片、四根引线和壳体组成的，如图7-10(a)所示。霍尔片是一块矩形半导体单晶薄片，引出四根引线：1、1’两根引线加激励电压或电流，称激励电极（控制电极）；2、2’引线为霍尔输出引线，称霍尔电极。霍尔元件的壳体是用非导磁金属、陶瓷或环氧树脂封装的。在电路中，霍尔元件一般可用两种符号表示，如图7-10(b)所示。 第八章：1. 常见的光电器件光敏电阻，光敏二极管，光敏晶体管，光电池，光电耦合器件，电荷耦合器件，位置敏感器件 2. 光纤传感器能测哪些物理量加速度，温度，漩涡流量 第十章：1. 超声波传感器的工作原理超声波物位传感器是利用超声波在两种介质的分界面上的反射特性而制成的。 超声波在流体中传播时，在静止流体和流动流体中的传播速度是不同的，利用这一特点可以求出流体的速度，再根据管道流体的截面积，便可知道流体的流量。 利用超声波可以探测金属内部的缺陷，这是一种非破坏性的检测。当材料内部有缺陷时，材料内部的不连续性造成超声波传输的障碍，超声波通过这种障碍时只能透射一部分声能。在无损检测中，十分细小的微裂纹即可构成超声波不能透过的阻挡层。利用此原理即可构成缺陷的透射检测法。 2. 测流速的两种方式管道内，管道外 第十一章：1. 微波传感器的特点微波传感器作为一种新型的非接触传感器具有如下特点： ①有极宽的频谱(波长=1.0mm~1.0m)可供选用，可根据被测对象的特点选择不同的测量频率； ②在烟雾、粉尘、水汽、化学气氛以及高、低温环境中对检测信号的传播影响极小，因此可以在恶劣环境下工作； ③介质对微波的吸收与介质的介电常数成比例，水对微波的吸收作用最强； ④时间常数小，反应速度快，可以进行动态检测与实时处理，便于自动控制； ⑤测量信号本身就是电信号，无须进行非电量的转换，从而简化了传感器与微处理器间的接口，便于实现遥测和遥控； ⑥微波无显著辐射公害。 2. 微波传感器的分类根据微波传感器的原理，微波传感器可以分为反射式和遮断式两类。 1.反射式微波传感器 反射式微波传感器是通过检测被测物反射回来的微波功率或经过的时间间隔来测量被测量的。通常它可以测量物体的位置、位移、厚度等参数。 2.遮断式微波传感器 遮断式微波传感器是通过检测接收天线收到的微波功率大小来判断发射天线与接收天线之间有无被测物体或被测物体的厚度、含水量等参数的。 第十二章：1. 热释电效应热释电型红外探测器是根据热释电效应制成的，即电石、水晶、酒石酸钾钠、钛酸钡等晶体受热产生温度变化时，其原子排列将发生变化，晶体自然极化，在其两表面产生电荷的现象称为热释电效应。用此效应制成的“铁电体”，其极化强度（单位面积上的电荷）与温度有关。当红外辐射照射到已经极化的铁电体薄片表面上时引起薄片温度升高，使其极化强度降低，表面电荷减少，这相当于释放一部分电荷，所以叫做热释电型传感器。如果将负载电阻与铁电体薄片相连，则负载电阻上便产生一个电信号输出。输出信号的强弱取决于薄片温度变化的快慢，从而反映出人射的红外辐射的强弱，热释电型红外传感器的电压响应率正比于入射光辐射率变化的速率。 2. 辐射式传感器的应用有哪些红外感应系统，红外测温仪，红外气体分析仪 第十五章：1. 热电效应两种不同材料的导体（或半导体）组成一个闭合回路(如图15-8所示)，当两接点温度T和T0不同时，则在该回路中就会产生电动势，这种现象称为热电效应，该电动势称为热电势。这两种不同材料的导体或半导体的组合称为热电偶，导体A、B称为热电极。两个接点，一个称热端，又称测量端或工作端，测温时将它置于被测介质中；另一个称冷端，又称参考端或自由端，它通过导线与显示仪表相连。 2. 热电偶测温的公式及书上例题","link":"/2024/01/02/%E4%BF%A1%E6%81%AF%E8%8E%B7%E5%8F%96%E6%8A%80%E6%9C%AF%E6%A6%82%E8%A6%81/"},{"title":"java考试背诵内容","text":"java考试背诵内容1.2.1Java语言优势与其他编程语言相比，Java具有如下几个方面的语言优势。1.资源免费2.跨平台3.健壮、安全4.高性能5.简单6.面向对象7.动态性8.多线程 1.资源免费Java技术虽然最初由Sun公司开发，但是Java Community Process(JCP,一个由全世界的Java开发人员和获得许可的人员组成的开放性组织）可以对Java技术规范、参考实现和技术兼容性包进行开发和修订。虚拟机和类库的源代码都可以免费获取，但只能够查阅，不能修改和再发布。2.跨平台Java是一种与平台无关的语言，它可以跨越各种操作系统、硬件平台以及可移动和嵌人式部件，其源代码被编译成一种结构中立的中间文件(.class,字节码)在Java虚拟机上运行。3.健壮、安全Java一直致力于程序的可靠性和健壮性，并投入了大量的精力进入早期的问题检测和后期的动态（运行时）检测。Java是一种强类型的语言，其类型检查比C++还要严格，其编译器能够检测出许多工作在其他语言运行时刻才能够检测出来的问题。在安全性方面，Java从一开始就被设计成能够防范各种攻击，包括禁止运行时堆栈溢出（蠕虫等病毒常用的攻击手段）、禁止在自己的处理空间之外破坏内存、未经授权禁止读写文件等，并在不断的完善升级中，避免病毒干扰。4.高性能Java是解释执行的，其速度和使用其他基于编译器的语言(C和C+)相当。为了提高执行速度，Java引入JIT(Just In Time,即时)编译技术，可以对执行过程进行优化，如监控经常执行代码并进行优化、保存翻译过的机器码、消除函数调用（内嵌）等，以加快程序的执行速度。事实上，与其他解释型的高级脚本语言相比，Java的运行速度随着JIT编译器技术的发展越来越接近于C++。5.简单Java的语言简单易学、使用方便，编程风格类似于C++,而且摒弃了C++中容易引发程序错误的一些特性，如指针、结构等，语法结构更加简洁统一。在内存管理方法，Java提供垃圾内存回收机制，自己负责内存的回收，有效地避免了C++中内存泄漏问题。Java还提供了丰富的类库，使开发人员不需要懂得底层的工作原理就可以实现应用开发。6.面向对象Java是一种完全面向对象的语言，基于对象的编程更符合人的思维模式和编写习惯，已经成为主流的程序设计方式。Java语言支持继承、重载、多态等面向对象的特性。7.动态性Java的动态特性是其面向对象设计方法的扩展。Java允许程序动态地装入运行过程中所需要的类，这是采用C++语言进行面向对象程序设计所无法实现的。8.多线程Java内置了对多线程的支持，提供了用于同步多个线程的解决方案。相对于C/C++,使用Java编写多线程应用程序变得更加简单，这种对线程的内置支持使交互式应用程序能在Internet上顺利运行 面向对象具有唯一性、分类性、继承性以及多态性四个特征 类与类之间存在六种关系：继承、实现、依赖、关联、聚合和组成一个类可以继承另外一个类，并在此基础上添加自己的特有功能在一个类的方法中操作另外一个类的对象，这种情况称为第一个类依赖于第二个类在一个类中使用另外一个类的对象作为该类的成员变量，这种情况称为关联关系聚合关系是关联关系的一种特例，体现的是整体与部分的关系，即has-a的关系组成关系也是关联关系的一种特例，与聚合关系一样也是体现整体与部分的关系，但组成关系中的整体与部分是不可分离的，即contains-a的关系 1.问题：抽象类和接口的共同点。回答：接口和抽象类都不能被实例化，需要被其他类实现或继承；接口和抽象类的类型变量都可以指向其实现类或子类的实例对象；接口和抽象类都可以包含抽象方法，实现接口或继承抽象类时都必须实现这些抽象方法。2.问题：抽象类和接口的区别。回答：接口体现的是一种规范，抽象类体现的是一种模板式设计；接口中除了默认方法和类方法，不能为普通方法提供方法实现（没有方法体）；而抽象类则完全可以为普通方法提供方法实现；接口中定义的变量默认是public static final,且必须赋初值，其实现类中不能重新定义，也不能改变其值，即接口中定义的变量都是最终的静态常量；而抽象类中的定义的变量与普通类一样，默认是friendly,其实现类可以重新定义，也可以根据需要改变其值；接口中定义的方法都默认是public,而抽象类则与类一样都是默认的friendly;接口不包含构造方法，而抽象类可以包含构造方法，抽象类的构造方法不是用于创建对象，而是让其子类调用以便完成初始化操作；一个类最多只能有一个直接父类，包括抽象类；但一个类可以直接实现多个接口。 1.问题：简述使用Socket进行网络通信的具体步骤。回答：使用Socket进行网络通信的具体步骤如下：(1)根据指定地址和端口创建一个Socket对象；(2)调用getInputStream（）方法或getOutputStream（）方法打开连接到Socket的输入/输出流；(3)客户端与服务器根据一定的协议交互，直到关闭连接；(4)关闭客户端的Socket.2.问题：简述使用ServerSocket进行网络通信的具体步骤。回答：使用ServerSocket进行网络通信的具体步骤如下：(1)根据指定端口实例化一个ServerSocket对象；(2)调用ServerSocket对象accept（）方法接收客户端发送的Socket对象；(3)调用Socket对象的getInputStream（）/getOutputStream（）方法建立与客户端进行交互的IO流；(4)服务器与客户端根据一定的协议交互，直到关闭连接；(5)关闭服务器端的Socket;(6)回到第2步，继续监听下一次客户端发送的Socket请求连接。 2.问题：Java中的多态体现在哪几个方面？回答：多态通常体现在具有继承关系的类之间，一个父类具有多个子类，可以将子类对象直接赋值给一个父类引用变量，无须任何类型转换；子类重写父类的方法也是Java多态性的一种体现。 线程生命周期线程具有生命周期，当线程被创建并启动后，不会立即进入执行状态，也不会一直处于执行状态。在线程的生命周期中，线程要经过5种状态：新建(New)、就绪(Runnable)、运行(Running)、阻塞(Blocked)和死亡(Dead)。 使用JDBC访问数据库的步骤如下：(1)加载数据库驱动；(2)建立数据连接；(3)创建Statement对象；(4)执行SQL语句；(5)访问结果集。 程序题目1: 使用ArrayList储存Student对象 编写一个Java程序，包含以下要求： 创建一个Student类，包含学号（id）、姓名（name）、成绩（score）属性，并提供构造函数。创建一个包含多个Student对象的ArrayList。实现一个查询数据的方法，用于根据学号查询并输出学生信息。实现一个比较学生成绩的方法，用于比较两个学生的成绩。使用Collections.sort对学生列表按照成绩进行排序，并输出排序后的学生列表。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152import java.util.ArrayList;import java.util.Collections;class Student implements Comparable&lt;Student&gt; { private int id; private String name; private double score; public Student(int id, String name, double score) { this.id = id; this.name = name; this.score = score; } public int getId() { return id; } public String getName() { return name; } public double getScore() { return score; } // 重写compareTo方法，按照成绩比较 @Override public int compareTo(Student other) { return Double.compare(this.score, other.score); }}public class StudentManagement { public static void main(String[] args) { ArrayList&lt;Student&gt; students = new ArrayList&lt;&gt;(); students.add(new Student(1, &quot;Alice&quot;, 85.5)); students.add(new Student(2, &quot;Bob&quot;, 92.0)); students.add(new Student(3, &quot;Charlie&quot;, 78.5)); // 比较并排序 Collections.sort(students); // 输出排序后的学生列表 System.out.println(&quot;按照成绩排序后的学生列表：&quot;); for (Student student : students) { System.out.println(&quot;学号：&quot; + student.getId() + &quot; 姓名：&quot; + student.getName() + &quot; 成绩：&quot; + student.getScore()); } }} 程序题目2: 多线程向银行里存钱 编写一个Java程序，包含以下要求： 创建一个Bank类，包含一个balance属性表示银行余额。创建一个线程类DepositThread，用于模拟向银行存钱的操作。每个线程存五次，每次存入一定金额。在DepositThread中使用同步块或同步方法确保对银行余额的操作是线程安全的。创建多个DepositThread对象，模拟多个客户同时向银行存钱。输出每次存款后的银行余额。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859class Bank { private double balance; public Bank(double initialBalance) { this.balance = initialBalance; } // 使用同步方法确保线程安全 public synchronized void deposit(double amount) { balance += amount; System.out.println(Thread.currentThread().getName() + &quot; 存入 &quot; + amount + &quot; 元，当前余额：&quot; + balance); } public double getBalance() { return balance; }}class DepositThread extends Thread { private Bank bank; private double amount; public DepositThread(Bank bank, double amount) { this.bank = bank; this.amount = amount; } @Override public void run() { for (int i = 0; i &lt; 5; i++) { bank.deposit(amount); } }}public class BankDepositSimulation { public static void main(String[] args) { Bank bank = new Bank(1000.0); // 创建多个DepositThread对象，模拟多个客户存钱 DepositThread customer1 = new DepositThread(bank, 200.0); DepositThread customer2 = new DepositThread(bank, 300.0); // 启动线程 customer1.start(); customer2.start(); try { // 等待所有线程执行完成 customer1.join(); customer2.join(); } catch (InterruptedException e) { e.printStackTrace(); } // 输出最终的银行余额 System.out.println(&quot;最终银行余额：&quot; + bank.getBalance()); }} 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152class bankaccount { private String bankno; private double balance; public bankaccount(String bankno,double balance){ this.bankno=bankno; this.balance=balance; } public double getBalance(){ return this.balance; } public void setBalance(double d){ this.balance=d; }}public class synbank extends Thread { private bankaccount account; private double money; public synbank(String name, bankaccount account, double money) { super(name); this.account=account; this.money=money; } public void run(){ synchronized (this.account){ double d=this.account.getBalance(); if(money&lt;0 &amp;&amp; d&lt; -money){ System.out.println(this.getName()+&quot;操作失败，余额不足&quot;); } else { d+=money; System.out.println(this.getName()+&quot;操作成功，目前余额为：&quot; + d); this.account.setBalance(d); } } } public static void main(String[] args) { bankaccount myaccount= new bankaccount(&quot;114514&quot;,5000); synbank t1=new synbank(&quot;T1&quot;,myaccount,-3000); synbank t2=new synbank(&quot;T2&quot;,myaccount,3000); synbank t3=new synbank(&quot;T3&quot;,myaccount,-7000); t1.start(); t2.start(); t3.start(); Integer a,b; a=100; b=a; System.out.println(b); a+=100; System.out.println(b); }}","link":"/2024/01/03/java%E8%80%83%E8%AF%95%E8%83%8C%E8%AF%B5%E5%86%85%E5%AE%B9/"}],"tags":[],"categories":[]}